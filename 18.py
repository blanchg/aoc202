import time
from collections import deque, defaultdict
ms = time.time() * 1000

def eval_line(current: list) -> int:
    # print('current', current)
    current = deque(current)
    n = []
    
    while '+' in current:
        a = current.popleft()
        op = current.popleft()
        if op == '+':
            b = current.popleft()
            current.appendleft(a + b)
        else:
            n.append(a)
            n.append(op)
    n.extend(current)
    current = n
    # print(current)
    if (len(current) - 1) % 2 != 0:
        print('Unknown input', current)
        return -1
    val = current[0]
    i = 1
    i2 = 2
    while i2 < len(current):
        op = current[i]
        val2 = current[i2]
        if op == '+':
            val = val + val2
        elif op == '*':
            val = val * val2
        else:
            print('unknown op', op)
            return -1
        i += 2
        i2 += 2
    # print('   ', val)
    return val

def parse(line):
    stack = deque()
    current = []
    for c in line:
        if c == ' ':
            continue
        elif c == '(':
            stack.append(current)
            n = []
            #current.append(next)
            current = n
        elif c == ')':
            val = eval_line(current)
            n = stack.pop()
            current = n
            current.append(val)
        elif c == '+' or c == '*':
            current.append(c)
        else:
            num = int(c)
            current.append(num)
    if len(stack) > 0:
        print('Unbalanced ()', len(stack))

    result = eval_line(current)
    # print(current)
    # print('   ', result)
    return result

def run1():
    result = 0
    for line in input:
        val = parse(line)
        if val == -1:
            break
        result += val
        # break
    return result

def run2():
    result = 1
    return result

input = [
'6 * 6 * (9 + 4) + (8 * 7)',
'3 * 7 + 3 * (3 + 6 * 7 + 9 + 4) * 9',
'2 + 5 + (8 * 7) * 4 + 4 + 7',
'6 + 3 + 4',
'2 * 8 * 5 * ((6 + 9 + 3 * 6) * 4 * 6 + 3) * 7',
'7 + 3 + 4 * 6 + ((8 + 6 * 5 * 6 * 2 * 4) * 9 * 9 * 3)',
'(5 * 6 + 9 + 7 + 8) + 9 * (7 * 9 + 6 * 2 + 3)',
'(7 + 6 * 3 + 5) + (2 * 3 + 6 * (9 * 2 * 6 * 3 + 6 * 3))',
'3 * 8 * ((9 + 4 + 2 * 2) * 9)',
'6 * (2 + (7 + 4 + 3)) * 9 * 8 * 7',
'5 + 7 * 2 * (6 * 3 + 2 * (4 * 4 * 8)) + ((4 + 5 * 6 + 7 + 3) + 9) * 4',
'5 + 5 * (3 + 6 + 8)',
'5 * 5 + 6 * 6 + 2 + (2 + 6)',
'(3 * 6 + 8) * 8 + ((2 + 5 + 4 + 9 + 4 + 8) * 2) * 7 * (2 * 6 + 8 + 5 + 2) + 2',
'7 * 7 * 3 * 9 + (4 * (6 + 3) + (9 + 2 + 9) + (5 * 3 + 6 * 3 * 8) * 2 * 9) * 9',
'3 + ((8 + 9) + (6 * 8 * 9 + 4 * 8 + 2) * 2 + (9 + 3 + 8 * 5 + 3) * 8) + 8 * 8 + 8 + (9 * 2 + 8 * 9 * (7 * 3 + 3) * 2)',
'(3 * 7 + 5 * (6 * 3 * 2 + 8 * 6)) * 9 + 6 * 3 + 6 + 4',
'(7 + 7 + 9 * 8) * 6 + 5 + 8 * 4 + (5 + 4 * 5 + 4)',
'(3 * 6 * 3 * 3 + 3) * 7 * 4 * 3',
'6 + 8 + 3 * 6 * (8 * 4 + 7 + 2 * 5) * (6 * 4 * 9 + 2 + 6 + 3)',
'7 + 8 + 6 * 5 * 4 + 7',
'4 + (4 + 7 * 3 + 8) + (4 * 5) + 9 + (8 * 7 + 5 + 3 + 8 + 9) * 6',
'4 * 5 + 2 * (9 + (3 + 9 + 2 + 3 + 4))',
'2 + 9 + (4 * 3) * 9 * 8',
'2 + 8 * (8 + 6 * 3 + (9 * 6 * 7 + 7 + 6) * (6 + 2 + 9) + (2 * 6 * 2 * 2 + 8))',
'(2 * 5 * 5 + 7 + 8) + 4 * (8 * (4 + 8 * 7 + 3) * 4 + 2 * 8 + 2) * 7 * 6 + 4',
'5 + 8 + 7 * 9 + 3 * (6 * (2 + 5) * 2 + 3 * (6 + 7))',
'3 + 2 * (7 * (8 * 8) * 4 + 2 + 4 * 9)',
'(5 * 4 * 4 + 7) + 5 * (6 + 8) * 7',
'5 + 4 + ((8 * 9 * 8 + 6) + 4 * 9 + 3 * 6 * 8) * 5',
'(6 + 5 * 9 * (3 + 7 + 2 * 2 * 7 + 7)) * 7 + (7 * 4) * 4 * 5',
'6 * 8 + 6 + (5 + (7 * 6 * 7 * 5 * 4 + 8) * 5 + 7 * (7 + 4 * 5 + 6) + 7) + (6 + 6 * 6 + 7)',
'(6 * 8 + 4 + 6 * 5 * 9) * 5 * ((4 * 3 * 5 * 2) * (4 + 7 + 8 * 4 * 5 + 6) + (6 * 4 + 4 * 7) * 7 + (9 * 8) * (5 * 2 + 7 + 3 * 2)) + 6 * 6',
'(8 + (9 + 2) * 2 * 2 + 2 * 8) + 5 * 4 * 2 + 4 + (5 + 9 * 7)',
'(5 * 4 * 5 + 2 + 5) * 3 + (8 + 9) * 9 * 2 + (5 + 7 * 5)',
'(6 + 3 * (8 + 6) * 4 + 8 * (4 * 5 + 6)) * 2 * (6 + (5 + 5 + 9 + 3 * 2 + 7) + 7 + (2 + 6) + (8 + 8 * 2 * 5))',
'6 + 3 * (2 + (3 + 8 + 9) + 4 + 4) * 4',
'6 * 5 * (2 * 6 * 5) * ((9 * 2 * 5 + 8 + 4 + 3) + 3 * 9) + 6',
'3 + (9 * 6 * 5 + 2 * 4)',
'5 * 4 + 2 * 3 + (8 + 9 + 9 * 6 * 4 * (3 + 8 + 4 + 2)) + 6',
'2 + 7 * 6 + (2 * 5 * 9 * 6 + 8)',
'3 * 7 + 9 * (4 + 4 + 8 + 8 * 7) + 3 + (9 * 2 * 7 + 6)',
'2 + 8 * 9 * (7 * 9 * 6 + (3 + 3) + 3) + 5 * 4',
'9 + 9 * 9 + (9 * 5 + 7 + 6)',
'6 + 7 + ((3 * 7 + 6 + 5) + 3) * 6 + 6',
'7 + (4 + 6 * (4 * 2 + 5 + 5 * 8 + 4) + 3 + 4) + 4 + 9 + 3 + 4',
'((4 + 8 + 4 + 5 * 8) + 5) * 9 + 3 * ((7 * 6) + (7 * 9 * 9 * 4 * 2 + 7) + 6 + (6 * 2 * 3 * 8)) + (9 * 4 + 7) * ((5 * 6 + 2) * 7 * 3)',
'(4 + 8 + 5 + 2 + 7 + 8) + (9 * 5) * 8 + 8 + 2 * 8',
'(8 * 4 * (7 + 6) * 5 + 3) + 5 + 5 + (8 + (4 * 9 * 5) * 7)',
'2 + 2 * (6 + 6 + 6 + 7 + 9 + 5) + 2 * (8 * 2 + 9)',
'5 + 6 + 2 * 2 * 3',
'6 + 6 + (8 * 6 * 3 * 3)',
'((4 + 8 + 8) * 8 * (4 * 7 + 8 + 9 * 7)) * 9 + ((4 * 6 + 5 + 3 * 2 * 4) + 9 * 4) * 6 * (4 + (6 + 4 * 6 * 8 * 3 + 2) + 4) * 4',
'(3 + 7 + (5 + 2 + 5 * 8 + 8) * 8) + (4 * 8 * 3 * 2 * 6) * 3 + 8 * 5',
'((3 + 7 * 6 + 2) * (4 * 6 * 7) + 3 * 7) * 2 + 7 * 5',
'5 * 9 + 5 * 2 * 8 + 8',
'(8 + 3 * 6) * 7 * ((2 + 4) * 4) * (3 + (6 + 2 + 3 * 2 + 3 + 5) + 3) * 2 * 8',
'(9 + 7 + 9 + 2) * 6 * 4',
'3 * ((9 + 5 + 7) * 6 * 4) + (6 + 3 + 4 + 9 + 3 * 8) + 9 * 4',
'(5 * 8 + 4 + 7 + 3) + 5 * 5 + ((9 + 9) * 5 + 9 + (4 + 4) * (7 * 7 + 2 * 8 + 2) * 6)',
'((7 * 4 * 6 + 2) * (3 * 7 * 9) * 6 + 8) * 4 + (8 + (2 + 3 + 3 + 4) + (5 * 4 * 2 + 2) * 5 + (8 * 8 + 9 + 7 * 4 + 6) * 6) + 7 * 5',
'3 + ((7 * 4 + 4) + 6) + 6 + (5 + 7 + 5) + ((4 * 4) + 3) * (9 * 5)',
'(9 * 5 + 3 + 7) * ((4 * 9 * 9 * 9 * 2) * 4 + 4)',
'6 * (7 + 6 * (4 * 9 + 5 + 7) * 8 * (5 + 2 + 9 + 6 * 6 + 5) + 2) + (9 + 9 * 8 * (4 * 5 * 2 + 6 + 5 * 6) * 4 * 7) * 8 + 3',
'(9 * 7) + (2 * 4 * 2 * 9) * 2 * 6',
'(2 + (6 * 9) + 9 * 5 * 3) * 2 * (8 + 7 + 4 * 4 * 6) + 3',
'(6 + 3 + (4 + 2 + 2 + 9 * 3) * 5 * (3 * 6 * 3 * 2 + 6) + (6 + 8 + 6 + 4 * 5 * 5)) + 3',
'2 * 8 * ((7 + 9 + 2 + 3) * 5 + 2 * (8 * 3) + 3 * 5) * (4 + 7 + 7 + 7) + 2',
'4 + 5 * (6 + 8 * (6 + 9 * 5) * 8) * (4 + 9 + 9 + (3 + 7 + 7 + 8) + 3 * 5) * 9',
'(4 + 8 * 7 * 2 + (3 * 3 + 6 * 9 * 6) + 3) + 6',
'5 + (5 + 9 + (4 * 5 * 4 * 4 + 2 + 5) + (8 + 8 + 4 * 9 + 6)) + 2 * 4 * 8',
'4 * (5 * 3) + 9 * 6 * 9',
'9 * (3 * 4 + 6 + 2 + 6) + 9 * 4 * 7',
'3 * 7 * 9 + (7 + 2 * 9 + 4 + 7 * 2) * 6 * 8',
'(7 * (6 + 7 + 4 * 8) * 7 * 9 + 6) + 9 + (8 + 9 * 9) * 6',
'2 + 6 * (9 + 9 + 3 * 3 + 8 + (5 * 5)) + 7 * 8 + (8 + 3 + 3 * 5 * (9 * 6 * 6 * 2 + 6 + 4) * 4)',
'8 + (8 * 2 * (6 + 5 * 2 + 6 + 8))',
'9 + 9 * 4 * 4',
'(8 + (7 + 3 + 3)) * 3 + (4 + 7 + (3 * 9 * 3 * 8) * 4 * 8) * 6',
'(5 + 7 + 5 + 3 * 5) * 7 + 6',
'5 * 3 * (2 + 3 * (8 * 8 + 6 + 9 * 3) * 9) + (4 * (8 + 6 * 6 * 5) + 7 + 5 * 2) * 6 + 7',
'8 * (9 + 3 + (2 * 6 * 6) + 3 + 4 * 8) * 5 + (6 * (8 + 4 + 8 * 2 * 8) * 4 + 3 * (7 * 7 + 5 * 5 * 3 + 3)) * 9',
'7 * 9 * (4 + 4 + 3 + 3 + 2) * 2 + 2 + 6',
'8 * 8 + ((7 + 2 * 7 * 9 * 2) * 4 + 9 + (9 + 2 + 5 + 6) + 7) + 4',
'2 * 8 + (9 * 6 * 3 * (9 * 9 + 3 + 3 * 6) * 3) + 7',
'((6 + 7 + 6) * 8 + 7 * 7) + ((2 + 8) + 8) + 9 * 3',
'(8 + 8 + 9) * 6 * 4 + 9 + 4',
'8 * 8 * 6 + 9 + 3 + 2',
'7 * 8 * 7 + (2 * 9 * 9 + 9 * 8) + 2 * 5',
'3 + (7 * 9 * (7 * 2 * 9 + 4) + 5 * 5 + 8) * 7',
'4 + 3 + 4 * (6 + 2 * (2 + 8 + 9 + 2 * 9 + 2) + 3 * 5)',
'(5 + 2 * 7 * 9 + (9 * 7 * 6 * 5 * 9)) * 6 + 5 + 2 + 3 * 4',
'(7 * 7 * (2 * 8) * 6) * 5 + 3 * 8 + 2 + 2',
'5 + 9 + 8 * (6 * (5 + 7 + 7) * 7 * 5 + 4 + 2) + 4',
'5 * 5 * (7 * 6 + 6 * 7 * 9 + (2 * 3)) * 4 + 3 * (2 * 5 * 9)',
'6 * 4 + (7 + 4 * 4) + (5 * (3 + 9) + 6 + 7 * 8)',
'(3 + 3 * 8 + 5 * (2 * 2 * 9 * 4 * 6)) * 9',
'((2 + 2 * 6 + 3 + 8) * 5 + 7) * (9 + (7 + 2)) + ((9 * 9 * 6) + 7 * 6 * 5) * ((5 * 8 * 6 * 7 * 6 + 5) + 8 + 5 * 9 + (9 * 5) + (4 + 7 + 9 + 4)) + (5 * 6 + 7 + 8 * 7 * 3) * 2',
'3 + 6 + (5 * 4 + (4 + 2 * 8 + 3)) * 4 + (7 + 6 * 4) * 2',
'6 + 8',
'8 * 4 + 7',
'8 * (3 * 4 + 4 * (2 * 9 + 8 * 9 * 7 * 6) + 4 * 6) * 7 * 7',
'((8 * 3 + 6 + 2 + 7 + 4) + 8) * (7 * 3) + 9',
'4 + 8 + 7 * (4 * (7 * 6 * 4) * 4 * 4 + 4 + 8)',
'5 + (3 + 7 + 3) * (3 * 9) * 8',
'(6 + (3 * 5) * (4 * 9 + 6 + 3 * 7) * (6 + 7 + 6) + 9 * 6) + 5',
'9 + 8 * (4 * 8 * 4) + 7 * 8 + 6',
'9 + (3 + 8 * 3 * 2 * 7 + 8)',
'4 + ((4 + 9 * 4 * 5) * 7 * 6) + 6',
'8 + (4 + 6 * 8 + 7) * (4 + 8 * 7 * (4 * 7 * 6) + 9) * 3 * 9 + 7',
'4 + 3 * ((6 * 6) * 2) + (7 * 5 * (2 + 5 + 8 * 5 + 5 + 2) + 8 + 3 + 9)',
'2 * 9 + (6 * 6 + 7) * 4 * 3 * (9 + 2 + (9 + 3 + 7) + 8 + 3 + 5)',
'(2 * 5 * 7 * 9 + 3) + 9',
'7 + 9 + (9 + 3 * 3 * 7 * 2 + 8) + 8 * 6',
'2 + 3 * 5 * (3 * 3 + 4 * (4 * 4 + 4)) * 5',
'9 + 3 * (5 + (5 + 8)) + 3 + (5 + 2 + (4 * 7 * 7 * 5) + 2) + 7',
'(9 + 3 * 9 * 8 + 5 + 8) + (3 * 6 + 3 * 4 + 8 * 6) + 2 * 2 * 3 + 8',
'7 * (9 + 2 + 3 * (5 * 8 * 7 * 2) * (6 * 6 * 2 * 9 * 7)) + 6 + 3',
'3 + (8 + 8 * 5 * 8 * 7) + (5 * 6) * 9 + (3 + 5 * (4 * 9 * 5 + 9 + 4 * 3) + 6) + 5',
'(6 + (9 * 2)) + 7 * 7',
'9 * ((5 + 7 + 8 * 9 + 9 * 3) * 8 * 8 + 9 * (8 * 2 * 3 * 2 + 9)) + 4 * (4 + (5 * 4 + 6)) * 3 * 3',
'7 + 9 + 9 + 5 + ((2 * 8 + 6 + 4 * 6 + 4) * 8 * 5) * 9',
'3 + 9 * 4 + 3 + 6 + (6 + 3 * 5 + 6 * 2 + 3)',
'4 + 2 * (5 * 6) + 2',
'5 + (6 * 2 + (3 * 4) + 9) + 5',
'3 * (4 * (6 * 6 * 5 * 8)) + (4 + 4) * ((2 + 7 * 7 * 6 + 7) * 9 + 2 * 5 + 3)',
'5 + ((6 + 2 + 5 * 3) + 7 + 5 * 5) + 5',
'8 + (6 + 4 + 8)',
'6 * (9 * 4) + 8 + (5 + 2) * 4',
'2 * 9',
'(5 + 4 + 7 + (4 * 5 + 8) + 4 + (9 * 7 * 6)) + 4',
'3 * 5 * 5 + 6 + (3 + 3 * (3 * 6 + 2 + 6) * 5 + 3)',
'3 * 2 + 3 + 2 + 7 * (4 * 3 * 6 + 9 + 5)',
'((6 * 6 * 9 + 8) + 4 + 5 + 4) + 3 + 9',
'7 * 2 + (8 * (7 * 2 * 8) + 5 + (3 * 4 * 8 * 9 + 7 * 8) + 3)',
'6 * 3 + (8 + 4 + 5 + 6 + 7 * 3) + 6',
'5 * ((8 * 7 * 9 * 8 + 9) + 9 * 9) * (5 + 2 * 9 + 5 * 8 * 8) + 6',
'8 * (5 * 9 + 3 + 5 + 4) * 7 * (5 * (6 + 7 * 7 * 4 * 3) + 9 + 6 * 6)',
'3 * (6 + 5 * 3 * 9 + 2 + (5 + 5))',
'7 + (9 * 5) + 9',
'2 + 4 + (9 + 3 * (6 * 8 * 8 * 8 + 8) * (6 + 7 * 5) + 8)',
'(5 * 6 * 8 + 5) * 7 + 9 + 8 * 4',
'9 + (3 + 4) + 6 * 6 * 3 + ((3 + 4 + 2) + (2 * 2 + 7 + 5) + 7)',
'9 * (2 * (2 * 2 + 6 * 6) + 4 * (5 + 6) * 9 + 9) + 2',
'(7 + 2 * 2) * 9 * ((2 * 7 + 9) * 7 * 7 + (4 + 9 + 7 * 3 + 6) * 4 * 5)',
'8 + 3 * 5 + 7 + (6 * 9 * (2 * 7)) * (2 + 7)',
'(8 + 7 * 7 * 2) * 8 + ((4 + 4 + 8 * 5) + 2)',
'5 * (5 + 6 * (4 + 8 + 7 * 3 * 7 + 6) * 3 * 5)',
'(5 * 5) * 6 * 8 + 5',
'9 * (5 + (3 * 8) + 9 * 3) + 2 * 2',
'(3 + (7 * 4 + 2 * 4 * 6) + 5 + 7) * 8',
'8 + 7 + (5 + 3 + 5 + 9 * 8) * 9',
'3 * 3 + 5 * 9 * (8 * (9 + 4 + 3) * 8 + (3 * 9 * 6 * 7 + 9 * 4) * 3) * 8',
'(7 + (7 * 7) * 5) + 4 + 5 * 5 * 8',
'3 + 4 + 9 + 8 * (6 * 2 * 2 * 9)',
'(7 * 3) + 3 * 7 + (3 + 8) + 3',
'(4 + 7 * (2 * 7) + 7 * 6 * (5 * 9)) * 2',
'3 + 9 + 7 * (3 + 2) + 7',
'2 * (9 + 4 * (3 * 7 + 6 * 4))',
'(2 + 3) * 2 * 4 * 5 + 6',
'4 * 4 + 2',
'7 * ((2 + 2 * 8 * 5 + 9 * 9) * 8) + 2 + 9 + (3 + 4 * 6 * 3)',
'5 * 5 * 6 * ((5 + 3 * 7 + 3 * 9 * 5) * (2 + 8) + 8 + 3) + 5 + 7',
'7 + (8 + 2) * 8 + 2',
'8 * 3 * 4 + 5 * ((2 * 5 + 7) + (8 + 6 * 7 * 4 * 8) * 3)',
'2 * 6 + (4 + 8 + (4 * 9 * 2 * 9 * 7 * 3) + 4 + 4 * 6) * 6',
'(2 * (4 * 4 + 4)) * 2 + 6 + 2 + 2 * 8',
'9 + 8 * ((6 * 3 + 5 * 9 * 9) + 5)',
'(7 + 7 + 6 * 4 * 9 + 6) * 6 + 5 * (8 * (5 * 9 + 3 + 3 + 2 * 9) * (5 * 8 + 8) * 6 + 6) * 5 + 8',
'9 * (8 + 7) * 6 * ((9 + 5 + 7 + 8 + 8 + 7) * (9 * 2 * 9) + 7 * 7) * (4 * 8 + (9 * 6 + 9 + 5 * 5 + 9) * 2 + (5 * 5 + 8 + 7 + 9)) + 2',
'3 + 6 + (2 + 9) + 5 + (7 + 4 + 9 + 6 + 8)',
'5 * 5 + ((9 * 2 * 6) + 8 + 5) * 4',
'(4 + (9 * 6 * 7 + 7 * 7 + 6) + 6 + 8) * 5',
'6 + 8 + 5 * 8',
'3 * (8 * 4 + 8 * 3) + 8 + 9 + 7',
'5 + 6 + 3',
'6 * 3 * 3 + (3 + 3 * 2 + (7 * 9 * 5 + 8) + 4 * 7) + (6 * 5 + 2) * 7',
'(3 * (7 * 4 * 6 + 8 + 8 * 6)) + ((3 * 2 * 6) * 6 * 3 + (9 * 5 * 4) * (2 * 8 + 4 + 8) * 2) * 6',
'(8 + 9 + 2 + 4 * (2 * 9 * 7) + (3 * 7)) * ((7 * 8 * 9 + 6 * 7) + 6 + 6 + 7)',
'3 + 8 * 2 * 5 * 9',
'8 + ((6 * 6) * 4) * 7 + 9',
'5 * (6 * (7 * 5 + 9 + 2 + 7 * 8) + 7 * 3 + (8 * 7))',
'2 * 4 * 4 * (4 + 6 + 2) * (9 + 5 * 7 + (2 * 2 + 2 + 9 + 3) + 4)',
'7 + 6 + (9 * 2 + 5 * 8 + 3 * 4) * (8 * 4 * 5 + 7 * 6)',
'4 + 2 * 5 * (4 + 8 * 8)',
'9 * 9 + ((6 * 6 + 6 + 9) + 2 * 3 + (9 + 9 * 5 * 6 * 4 * 4) + (5 + 7 * 2 * 3)) + (9 * 5 + 9 + 8) * (3 + 6 * 4 + 5 + 8 + 2) + 6',
'6 * (7 + 3) + 9 + 9 + (3 * 7 * 5 * 5)',
'((9 * 5 * 7 + 6 * 9 + 4) + 6 + 8) * 7 * 9 * 8',
'8 * 6 + ((8 + 6) + (4 * 5) * 7 + 5 + 3) + 7 + (4 + 5 + 5 * 2 * 6 + 8) * 5',
'(9 * 2 + 5 + 4 + 7 + 6) + 3 * 8 + 5',
'(7 + (8 * 7) * (5 + 3 * 3 + 2 * 5 + 5) + 2) * 7',
'(6 + 8 + 2 + 3) + 5 + 3 + 5 * 7 + (2 + 2 * 7)',
'(5 * 6 * 2 + 2 + 8 * 9) + 3 * 6',
'2 + (4 * (3 * 5 * 9 * 9 * 8 * 8))',
'7 * (8 * (5 * 9 + 9 + 5 * 2) + 3) + 3',
'5 + 2 + ((9 * 4 + 4 * 7 + 2) + 2) + 9',
'((6 + 3 * 9) * 3 * (7 + 5 + 7 + 8 + 4 + 8) * 7) + 7 * 9',
'6 + (4 * (8 + 4 * 2) + (5 + 7 * 3 + 4 + 5))',
'8 + 7 * 4 + 5 * 3',
'8 * 6 * 7 + 2 + (3 * 3 * (7 + 4 + 4 * 8) * 4) * 4',
'8 * 8 + 8 * 3 * ((9 * 9) + 3) * (8 * 2 * 4)',
'(4 + (8 * 6 * 4 * 4 + 4) + (6 + 9)) + 2 + 4 * 4 + 4 * (7 * 8 + (5 + 7) * 7 + 4 * 4)',
'((3 + 7 + 3 * 3 * 3 + 3) + 3 * 4 + 2) * 8 * 5 + 2 * (6 * 3 + 3 * (5 * 9 + 5 * 4) * 2 * (4 + 4 + 7 * 9 * 2))',
'(6 * 7 + (2 + 5 * 9 * 3 + 7 * 3) + 3 + (5 * 3 + 8)) * 4 + 7 * 9 + (7 + (7 * 6 + 6 * 5 * 5) * 6)',
'6 * 4 * 5 * 5 * ((8 + 5 * 7) * (6 * 8 * 4 + 9) * 2 + 6 + 2)',
'6 * (2 * 4 * 2) + 4',
'4 + 6 + (3 * 2 * 7 * 4) * ((9 + 2 * 4 + 5) + 6 * 3) + 6 + 9',
'9 * 3 * 3 + 4 * 6 + ((5 * 9 + 9 * 6 * 5 + 2) + 6 + 9 * 2)',
'3 + 9 * 2 * (2 * 2 * (9 + 7 + 9 * 9 + 7 + 3)) * 8',
'((5 * 6 + 2 * 9 * 8 * 5) + 6 + 6) * 7',
'((4 + 9 * 2) * 2 * 4 * 3 * 3 + 7) + 5 + 2 * 4 * (7 * 3 + 6 * (8 * 4 + 6) * (9 + 9 + 8 + 6 * 2))',
'7 * (7 + 7 + (7 + 7 * 6 + 4 + 3) + 5)',
'(7 * 3) + (3 + 5 + 7 + 2) * 2 + 2 * ((2 * 7 + 6 * 8) + (8 * 5) + 2)',
'(5 + 8 + 2 + 4 + 3 * 5) + (8 * 2 + 8 + 4 + 5 + 7) * 6 * 8 + ((4 + 6 * 8 + 4 * 5) * 5 * 3 + 4)',
'(9 + (8 + 6 * 9) * 4 * 9) + 3 * 6 * (2 * 6) * 6 + 2',
'5 * 9',
'2 + 8 * (4 * 2 + (3 * 9) * 4 + 5 * 6) * 3 + 6',
'(7 + 4 * 9 + 2 * 8 * 5) + 9 * 2 * 7 * 8',
'6 * ((7 * 7 + 3 * 5 * 6) * 5 * 6 + (3 * 8 * 7) * 3 + 9) * 2',
'((5 * 6 + 8 * 2 * 4) + 6 + 8) + 5 * 5 + 6',
'4 * (4 + 2 + (9 + 3 * 7 + 8 + 2) * 2 * 4) * (9 + 8 + 6 + 8 + (6 + 3 * 2 + 7 + 4 + 7))',
'(9 * 9) * 6',
'9 + 5 + (6 * (7 + 7 * 5 + 2 * 6 + 2) * 7)',
'7 + 8 + 6',
'(2 * 4 + 7 + 2 * 4 * 8) * 5 * 2 * 5 + (8 + 6 + 3 * 8 + (4 + 7 * 2 * 7)) + 7',
'2 * 6 + 3 * 7 * (6 + 7 + 3 + 4 + 6 * 8)',
'9 + (9 * 3 + 7) + 3 + 3',
'6 + 4 + (4 + (4 * 8) * (9 + 9 * 4) * 6)',
'(3 * 3 + 7 + 7 + 3) * 5 * 7 + (6 * (7 + 7 + 6 * 2 * 6 * 6)) + 2 + 5',
'6 * 8 * (8 + (7 * 8 + 3) * 9 + 5)',
'3 * 4 + 3 + (4 + 2 * 2) * 8 + (8 * (2 + 5) * (5 * 3 * 9 + 2 * 6) * 9)',
'((8 * 6 + 5) + (6 * 3 * 6)) * 7',
'(8 * 4 * 2 + (5 * 8 * 5 + 7 + 3 + 5) * 8 + 5) * 7 + (6 + 9) * (8 + 3 * 7) + (9 * 9 * 6 * 2 + 8) + 2',
'7 + 5 * (8 + (6 * 8)) + ((9 * 4 + 5 * 5) + 8 * 5 + 3 + 8 * 4) * (8 + 3) * (8 + 8 + (6 * 4 * 2 * 5 + 7) + 3)',
'9 + 7 * 6 + 2 * 3 + ((2 + 6 + 9 * 8) + 3 + 9 * 3 + (3 + 3 * 4))',
'7 * (8 * 9 * 5) + 6 * (3 + (5 + 4 * 4)) * 2 + 9',
'4 + 7 * 5 * (8 * (5 + 5 + 6) + 5 * 6 + 9)',
'4 + 3 * (2 * 2 + 8 * 2) * 7 * 5 * 6',
'4 + 7 * 5 * (6 * 6 * 3 + (8 + 8 + 3 * 7 * 4 * 8)) * (5 * 6 * 9 + 7 + 9)',
'((4 * 6 * 2) + 2) * 8 * 7 + 2',
'9 + 7 + (4 + 4 + 2 + 2 * 4 + 9) * 8 + 8 + 7',
'(8 + (7 + 8) * 6 * (5 + 6 + 9 * 8) * 6 + 9) + 5 * 9 + 8',
'((5 + 2) + 7 + 2 + (4 * 6 + 8 + 6) * 6) * 6 + 5 * 4 + 9',
'4 + 5 * 6 * 7 * 9',
'8 * ((6 * 6 + 6 + 4 * 4 * 8) * (9 + 3) + 6 * (7 + 6 * 2)) + 2',
'((3 + 5 + 9) + 7 + 4 * 2 + (9 + 7 + 5 * 8) * 9) + 2',
'3 * ((6 * 9 * 6 * 5 + 5 + 4) + 8) + (6 * (8 * 6 * 3 * 7)) + 3',
'(9 + 9 + 2 * 2 * 3 * (9 + 4 + 9)) * 5 + 4 * 7',
'(4 * 4 + 9) * 8 * 8 * (9 + 3)',
'5 + (3 * 5 + 2 + (2 * 7) * 4 + 8) + 6 + 9 + (2 + 7 * (3 * 6) * 6 * 6 + 8)',
'2 + 4 + (5 * 3 + 6 * (7 * 7 * 4 + 3) + 6 + 7) * 2',
'(5 + 6 + 3 + (8 * 3)) * 3 + 6',
'4 + 6 + (3 * 9 + 5 * (7 * 9 + 4) + 4 + 4) + 3 + 5 + 6',
'4 * 9 * 7 + 2 + 6',
'6 * (5 * 5 + 3 * 8)',
'5 + 6 + 3 * 7 * 5 + (8 * 3 + 4 + 7)',
'(3 + 2 * (2 * 2 + 5 + 2) * 3 * (7 * 6 * 2 + 3) + 2) + ((9 * 6 * 7) * (2 + 7 + 8 + 2 + 6 * 4) * 7 + 9) * 6 * ((6 + 7) * (4 * 6 + 4 * 7) * 9 * 3) * 2',
'9 + 2 + 7 * (6 * 5) * 6 * 6',
'(7 * 6 + 7) * 6 + 3 + 6 + 2 + 7',
'6 * 4 + ((3 + 5) + 8 * 8 + 3 * (7 * 3)) + 3 * 9',
'5 + 4 + ((6 * 8 + 4 * 9) + 7 * (6 * 3 * 4 * 4 + 5 + 3) * 5 * 6 + 9) * 2 * 5 + 8',
'3 + ((7 + 7 + 3) * 8) + 7 + 8 * 2 * 9',
'3 + 9 * 2 * ((8 + 9 * 8) * 4 * 9 + 2) * 2 + (5 + (3 + 8 + 4 + 3 * 8) * 8 + (8 * 9 + 7 * 4) + 6 * 7)',
'6 + 4 + 7 + ((9 * 7 + 6) + 6 * 2 + 6 + 2 + 5)',
'7 + 8 + 5 * 3 + (8 * 5 * 3 + 7 + 4)',
'(4 * 7) + 5 * (8 * 9 * 6 * 7 + 6 * 8)',
'8 + 5 * 7 * 6 + (9 * 2 * 3 + (7 + 7) * 9 + 4)',
'((5 * 8 + 9 * 6) * 8 * (3 + 5 + 5 + 7)) * 5 + (6 + (2 * 8 * 4 * 6 + 7) * 5) + 7',
'6 * 8 + (3 + (7 + 3) + 8 * (6 + 9 + 9 * 9 + 2 + 2) + (8 * 6 + 5) + 2) + 5',
'7 + 6 * 7 + 8',
'7 * (3 + (3 + 7) + 4) * (5 * 7 * 6 * 2) + 5 + 3 * 5',
'3 + (4 * 7 + (4 + 6 * 7 + 8 * 7 * 4)) * 8',
'((9 * 3 + 6 * 7 + 9 + 6) + 6 + 7 + 4 + 2 * (5 + 6 * 2 * 4)) * 5',
'(8 + 7 + 7) + 7 + (3 * 6 * 6 + 9 * 2)',
'(7 + (3 + 6 * 8)) + (9 + 6 + (8 * 5 + 7 + 3) * 2 + 4)',
'(6 + (7 + 5 * 5 * 7)) * ((8 + 3) + (5 + 4 * 5 * 8 + 6 + 6) + 9 * 3 + 8 + (4 + 2 * 5 + 3 * 6 + 5))',
'8 * 7 + 8 * (2 * 9 + 5 * (5 * 2)) + 9 * 2',
'2 + 9 * 8 * 7 * (2 + 9 + 7 * 7) + 5',
'4 + (8 * 2 + 7) * 7 + 3 + 8 * (7 + 8 * 9 + 2 * 2)',
'(7 + 7 * 2) + 4',
'(9 + 5 * 3 + 4) * 4',
'2 + 2 * (9 * 7 + 5 + (2 + 8) + (5 * 6 + 8 * 5)) + 2',
'4 * (4 * (8 + 9 + 3 * 5 * 8 + 2) + (5 * 2) * 3 * 4 + 6) + 2 + 7',
'4 * 2 * (7 + 2 + 9 + 7) * 9 + 2',
'(6 + 2 + 4 * 3) + 8 + 9 + 5',
'7 * 4 * (5 * 3 * (6 * 4) + 2) + 6',
'5 * 5 * (6 * (5 + 7 + 4 * 2 + 7 * 9) + 8 + 8 * 2)',
'(6 * 4 * 2 * 6) + 6 * 7 * 9 + 2 + 2',
'3 * (8 * 4)',
'(8 + 9 * 7) + 8 * 7 * 4',
'4 + (9 * 6 + 3 + 5 + 2) * 5 + (4 + (4 * 5 + 2 + 4 * 2) + 3 + 2 + 5) * (9 + 5)',
'(6 * 7 + 6 + 9 + 7) * 5 + ((9 + 6) * 9 * 7 + 2 + 9) + 2 + (3 * 2) + (3 + 7)',
'(4 + (6 * 7 * 5 + 7)) * 4 * 7 + 5',
'(3 + 9 + (8 * 8 + 6 + 8 * 9) + 8 + (5 * 3 * 4 * 5) * (3 + 8 * 7 * 7 * 2 * 3)) * 5 + (6 * (3 + 7 + 4) + 4 + (5 * 9 * 6 * 2 * 8 + 4) * 4)',
'7 + (5 + 9 + 9 + 7) * 8',
'5 + 3 + 8 + 3 * 4 * 2',
'(3 * 5) + 7 + (3 * 5 * 6 + 6 + 2) * 7 + (5 + 7 * 7 * 5 + 8)',
'8 + 5 + ((3 * 5 + 8 + 8 * 7 + 7) * 2 + 2)',
'((7 * 5 + 2 * 5) * 6 + 5) * ((4 + 7 + 3 * 5) * 8 + 4 * (3 + 9 + 5 + 8 * 7 + 8) + 5 * 2) + (8 * 9 + 8 + 7 * 6 * 8) * 4 * 3',
'4 * (5 + (7 * 5)) + 5 * (8 * 6 * 8) + (8 + 6 * 3 + 5) * 5',
'2 + (8 + 5 + 5) * 9 * 3 * (5 * 3 * 5) + ((4 * 4 * 4 + 5 + 7 + 3) + 9 + (2 + 7 * 5) + (9 + 9 * 2 * 2 * 4 * 4) * 9)',
'4 + 7 * (9 * 2 + (3 * 7 + 8 + 9 + 5) + (7 + 4 * 8 + 7 + 7) + 3)',
'8 + 6 + 6 * 9',
'(7 * 2 * (8 * 3 * 6 + 5) + 4 * 6) * (3 + 2) * 4 + 5 * (8 * 8 + 6) + 9',
'(6 + 2) * (7 * 4 * 5 + 7 * 2 + (3 * 8 + 3)) + 2',
'(3 * 6 * (6 * 6 * 6 + 6 * 7 * 3)) + 4 + 8',
'4 * 8 + (5 + 9 * 8 + 8 * 4)',
'6 * (4 + 6 * (8 + 2) + 5) * 6 + 4 + 4 + 2',
'7 + (8 + 8 * 9 * 5 * 9 * 6) + 4 + 6 * 4 + 6',
'8 + ((4 * 7) + 3) * 3 + 3 + 6 * 7',
'3 * 3',
'(5 * 8 * 5 * 2 + 8 + 8) + 9 * 3 + ((2 + 2 * 3 + 6 * 2 * 5) * 6 * 4 + 3 * 6 * 8) + ((7 + 2) * 7 * (7 * 9) * 2 * 5) + 7',
'4 * 3',
'(4 + 6 + 8 + 8) * 6 + (9 * 6 * 2 * 8) + 4 * 4',
'7 + (5 + (8 + 2) + (4 + 5))',
'(8 * 6 * (3 * 9)) + 3 * 5 + 2 * 7 * 5',
'6 * (9 + 3 + 6 + 4 * 3 + 4) + 4 * (7 * 7) * 5',
'8 + ((7 + 2 + 2) + 2 + 7 * 4 * 3 + 6) + 9 * 2',
'(8 + 9 + 6 * (7 * 9 * 6 * 5 * 9) + 4 + 2) * (6 + 6 + 3 * 4) + 4 + 9',
'9 + (3 * 2 * 6 * 9 + 6) + 8 + 3 + 7 + 6',
'3 + (8 + (4 + 4 + 4 + 2) * 9 * (7 + 9 + 5) * 2) + 3',
'(2 * (3 * 3 + 5 + 5 * 4 + 4) * 7 * 3 * 7 * 6) + 2',
'3 + 6 * 4 * (5 * 9 * 3) * (6 * 2 * 4) * 2',
'2 + ((4 + 8 + 8 + 6) * 8 + 9 * 5 + 7 * 2) + 7 + 3',
'5 * 6 * (9 + 8) + (2 + 6 + 4 + 9) + 9 * (7 * 6 * 6 + 2 + 9)',
'5 + 4 * 7 * 9 + 3 + 4',
'7 + 9 * (4 + 7 + 7 + 3) * (2 + 7 * 4)',
'(2 + 7) * ((3 + 3 * 4 * 7 * 4) * 8 * 6 + 9 + 8 * 2) + ((7 * 4) * (9 * 5 * 5 + 9 * 9) * 3 * 7 + (7 + 4 * 4 * 9 * 5) * (5 + 2 + 3 + 8 + 3 + 4)) + 2 + 3 * 7',
'7 + 2 * (2 + 2 * 4 * 8 * (9 + 7 + 2 + 8) + (2 * 2 + 5 + 7 * 7)) * 7',
'7 + ((7 + 3 * 3 * 4) * 3 * 9)',
'9 + ((5 * 2 + 6) + 2 + (8 + 4 + 5 + 6) + 9) * 5',
'8 + 2 + (5 * 3 + 3) * 4',
'(8 * 7 * (2 * 3) + (7 * 8 + 3 + 5 + 2 * 3) + 4 + 9) + 4 + 2 + (5 + (4 + 4 * 6 * 6 + 5) + 8 * 6 + (8 * 4 * 9 * 4 + 4 * 4)) * 4',
'(9 + 5 * 3) + 7 + 9 + (3 * (7 + 4 * 2 + 9) + 4 * 7)',
'3 * 7 * (3 * (2 * 5 + 3) * 9) + 9 + ((9 * 3 * 7 + 9 + 3 * 6) * (2 + 3 + 9 + 8 + 9 * 5) * 2 + 5)',
'5 + (5 * 9 + (2 * 3 + 7 * 3 * 7) + 8 + 8)',
'7 + (4 + (8 + 3 * 4) + 3 + 9 + 8) * 4 + 2 + 3 * ((2 + 5 + 4 * 9 + 9) + (3 + 3 * 8 * 7))',
'3 * 6 + 2 * 4 * ((4 * 4) * 3 * 4 + 3) + 5',
'8 + 6 + 7 + (5 * 9 * 9 * 4 + 5) + (4 + 8) * (9 * 7)',
'9 + 3 * 3 + (2 + (7 * 5 * 9 * 2 * 8) * 3 * 2 + 8 + 4) * 7 * ((9 + 4 * 6) * 7)',
'(8 * 9 + 5 * (4 + 7) * 4) + 7 + 9 * (4 + 5 + 8) * 4 * (9 * (8 * 9 + 3 * 3) + 8 * 7 + 3)',
'(8 + (2 + 8 * 3 * 3 * 3 + 5) * 7 + (7 + 6 * 8 * 9 * 6) + 5) + 5 + 8 + 4 + (4 * 2 * 2 + 2 + 2 * 4)',
'(6 * 7 + (2 * 4) * 9) + 4 * (7 + 7 * 6) * 3',
'(9 + 6) * 6 + 3',
'6 + 2 * 7 * (9 + 7 + 6) * ((9 * 4 + 2) * 7 * 4 * 7 * (9 * 5 * 7) + 2)',
'4 + (4 + 8 * (8 + 9 + 5 * 7 * 6 + 8) * 3 + 8 * 2) + ((4 * 9 * 8 * 4 + 2) + (6 * 2 + 8 + 3 * 9 * 5) + 9 + 4)',
'6 * 5 * (2 * 4 + 3 * 6 * (5 + 9 * 4) * 4) + 4 + 4 + 8',
'((5 * 3 + 2 + 3 * 9) + 8 + 4 * 8) * ((9 + 3 + 7 + 5 * 4 * 4) * 5 * 7 + 9) + 7 * (3 + 5 + 4 + (2 * 5)) * (4 + 6 * 2)',
'5 * 4 + 2 + (5 * 9 * 8 * 8 + 2 + (8 + 9 * 2 + 7 + 8 * 3))',
'(6 * 5 + 9 + (9 * 8 * 9 * 6 * 4) + 2 + (5 * 6)) + (4 + 9 + 6) + 6 + 9',
'8 * 6 + (9 * 8)',
'6 * 9 + 6 * (5 * 7 + 7 + 4) + 9 * 9',
'7 * 3 * 9 * 8 * (7 * 2 + 9) + (4 + 8)',
'((7 + 2) + 5) + 8 * 6',
'8 + (9 * 7 + 5) + (7 + 9) + (5 * 3) * 8',
'8 * 7 + 6 + 8 * 7 * (6 * (9 * 6 + 8 + 5 * 7) * 9)',
'(3 * 5) + 3 * (6 + (2 * 3) * 5 * 2 * 3 + 5) * 7 + 5 + 4',
'(9 * 8) + (6 + 9) + 4 + 6',
'7 * (9 + 9 + 9 * 5) + 6 * ((3 + 6 + 6) + 8 * 9 * 5) + 3',
'6 + 7 * 8 * ((5 + 6 + 2 * 6 + 9) + 6 + 2 + 5) * 9',
'(5 * (8 + 9 + 9 * 3) * 9 * 3) + (5 * 8 + 8) * 3 * 5 + 7',
'5 + (8 + 6 * 2) * 8 + (8 + 2 + 9 + 7 * 2 + (4 * 4 * 9 * 9 + 4))',
'4 * (9 + (2 + 4 + 2 * 8 * 6 * 2) + 4 * 3)',
'6 + ((4 * 2) * 9 * (5 + 9 * 2 + 6 * 3 * 3) + 2 + 9 + (4 * 9 + 8 + 5 + 6 * 2)) * (7 * 9 * 7 * 7 * 2 + 4) * 8',
'5 + (6 + (9 + 9) * (9 + 4 * 9) + 6) + 4',
'9 + (7 + (9 * 8 + 9 + 5 * 4) * 3) + 8 + 8',
'9 * 3 * 4 * 9 * 3 + ((2 * 4) * (7 * 3) + (6 + 7 * 3 + 4 * 5 + 2) + 3)',
'(4 + 8) + 5 * 8 * (6 + 2 + 9 * 2)',
'5 * 2 * 4 + (6 * 2)',
'(6 + 3 + 7) * 6 * 9',
'6 + (8 + 8 + 8) * (7 * 6 * 9) * 9 * (2 + 6 + 3 * 4 * 6) + 4',
'(6 * 4 * 7 + (3 * 4) * 8 * 8) * 8 + 8 * 6 + 8',
'9 + 6 * 7 * 8',
'(5 * 7 * (7 + 8 * 9 + 5) * 6) + 5',
'7 * 4 + ((6 + 9 + 6 + 6) + 6 + 2 + 5 + 6) * 4 * (3 + (2 + 2 * 9 * 2 * 5) * 9 + 4 + 3) * (7 * (6 * 3) + (3 + 6 * 5 + 8))',
'6 + 3 * 5 + 9 * (5 + 5 * 5 * 9 + (8 * 6 + 8) * 4)',
'5 * 5 + 9 * 9 * 6 + (9 + (9 * 2 * 2))',
]


part1 = run1()
print(f'Part1: {part1}')



part2 = run2()
print(f'Part2: {part2}')

print(f'Took {time.time()*1000 - ms}ms')